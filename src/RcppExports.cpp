// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rbetareg
Eigen::VectorXd rbetareg(const Eigen::MatrixXd& x, const Eigen::VectorXd& beta, double phi, unsigned int seed);
RcppExport SEXP _ImpBootPaper_rbetareg(SEXP xSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rbetareg(x, beta, phi, seed));
    return rcpp_result_gen;
END_RCPP
}
// optim_mle
Rcpp::List optim_mle(Eigen::VectorXd& theta, Eigen::VectorXd& y, Eigen::MatrixXd& x, int maxit, double eps_f, double eps_g);
RcppExport SEXP _ImpBootPaper_optim_mle(SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< double >::type eps_g(eps_gSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_mle(theta, y, x, maxit, eps_f, eps_g));
    return rcpp_result_gen;
END_RCPP
}
// of_mle
Rcpp::List of_mle(Eigen::VectorXd& theta, Eigen::VectorXd& y, Eigen::MatrixXd& x);
RcppExport SEXP _ImpBootPaper_of_mle(SEXP thetaSEXP, SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(of_mle(theta, y, x));
    return rcpp_result_gen;
END_RCPP
}
// of_swiz
Rcpp::List of_swiz(Eigen::VectorXd& theta, Eigen::VectorXd& pi, Eigen::MatrixXd& x, unsigned int seed);
RcppExport SEXP _ImpBootPaper_of_swiz(SEXP thetaSEXP, SEXP piSEXP, SEXP xSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(of_swiz(theta, pi, x, seed));
    return rcpp_result_gen;
END_RCPP
}
// swiz_fn
double swiz_fn(Eigen::VectorXd& theta, Eigen::VectorXd& pi, Eigen::MatrixXd& x, unsigned int seed);
RcppExport SEXP _ImpBootPaper_swiz_fn(SEXP thetaSEXP, SEXP piSEXP, SEXP xSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(swiz_fn(theta, pi, x, seed));
    return rcpp_result_gen;
END_RCPP
}
// swiz_gr
Eigen::VectorXd swiz_gr(Eigen::VectorXd& theta, Eigen::VectorXd& pi, Eigen::MatrixXd& x, unsigned int seed);
RcppExport SEXP _ImpBootPaper_swiz_gr(SEXP thetaSEXP, SEXP piSEXP, SEXP xSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(swiz_gr(theta, pi, x, seed));
    return rcpp_result_gen;
END_RCPP
}
// optim_swiz
Rcpp::List optim_swiz(Eigen::VectorXd& theta, Eigen::VectorXd& pi, Eigen::MatrixXd& x, unsigned int seed);
RcppExport SEXP _ImpBootPaper_optim_swiz(SEXP thetaSEXP, SEXP piSEXP, SEXP xSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(optim_swiz(theta, pi, x, seed));
    return rcpp_result_gen;
END_RCPP
}
// swiz_dist
Eigen::MatrixXd swiz_dist(Eigen::VectorXd& pi, Eigen::MatrixXd& x, unsigned int B, unsigned int seed, unsigned int ncores);
RcppExport SEXP _ImpBootPaper_swiz_dist(SEXP piSEXP, SEXP xSEXP, SEXP BSEXP, SEXP seedSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type B(BSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(swiz_dist(pi, x, B, seed, ncores));
    return rcpp_result_gen;
END_RCPP
}
// par_bootstrap_mle
Eigen::MatrixXd par_bootstrap_mle(Eigen::VectorXd& start, Eigen::MatrixXd& x, unsigned int B, unsigned int seed, unsigned int ncores);
RcppExport SEXP _ImpBootPaper_par_bootstrap_mle(SEXP startSEXP, SEXP xSEXP, SEXP BSEXP, SEXP seedSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type start(startSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type B(BSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(par_bootstrap_mle(start, x, B, seed, ncores));
    return rcpp_result_gen;
END_RCPP
}
// par_boott
Eigen::MatrixXd par_boott(Eigen::VectorXd& theta, Eigen::MatrixXd& boot, Eigen::MatrixXd& x, unsigned int B, unsigned int seed, unsigned int ncores);
RcppExport SEXP _ImpBootPaper_par_boott(SEXP thetaSEXP, SEXP bootSEXP, SEXP xSEXP, SEXP BSEXP, SEXP seedSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type B(BSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(par_boott(theta, boot, x, B, seed, ncores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ImpBootPaper_rbetareg", (DL_FUNC) &_ImpBootPaper_rbetareg, 4},
    {"_ImpBootPaper_optim_mle", (DL_FUNC) &_ImpBootPaper_optim_mle, 6},
    {"_ImpBootPaper_of_mle", (DL_FUNC) &_ImpBootPaper_of_mle, 3},
    {"_ImpBootPaper_of_swiz", (DL_FUNC) &_ImpBootPaper_of_swiz, 4},
    {"_ImpBootPaper_swiz_fn", (DL_FUNC) &_ImpBootPaper_swiz_fn, 4},
    {"_ImpBootPaper_swiz_gr", (DL_FUNC) &_ImpBootPaper_swiz_gr, 4},
    {"_ImpBootPaper_optim_swiz", (DL_FUNC) &_ImpBootPaper_optim_swiz, 4},
    {"_ImpBootPaper_swiz_dist", (DL_FUNC) &_ImpBootPaper_swiz_dist, 5},
    {"_ImpBootPaper_par_bootstrap_mle", (DL_FUNC) &_ImpBootPaper_par_bootstrap_mle, 5},
    {"_ImpBootPaper_par_boott", (DL_FUNC) &_ImpBootPaper_par_boott, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_ImpBootPaper(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
